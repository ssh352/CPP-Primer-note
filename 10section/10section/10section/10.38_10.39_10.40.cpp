/*
10.38:
输入迭代器(input iterator)
	可以读取序列中的元素
	输入迭代器必须支持
		用于比较两个迭代器的相等和不相等运算符(==、!=)
		用于推进迭代器的前置和后置递增运算符(++)
		用于读取元素的解引用运算符(*)：解引用指挥出现在赋值运算符的左侧
		箭头运算符(->)，等价于(*it).member，即，解引用迭代器，并提取对象的成员
	输入迭代器只能用于顺序访问
		对于一个输入迭代器，*it++保证是有效的，但递增它可能导致所有其他指向流的迭代器失效
		不能保证输入迭代器的状态可以保存下来并用来访问元素
	因此，输入迭代器只能用于单遍扫描算法
		算法find和accumulate要求输入迭代器
		istream_iterator是一种输入迭代器

输出迭代器(output iterator)
	可以看作输入迭代器功能上的补集――只写而不读元素
	输出迭代器必须支持
		用于推进迭代器的前置和后置递增运算(++)
		解引用运算符(*)，只出现在赋值运算符的左侧(向一个已经解引用的输出迭代器赋值，就是将值写入它所指向的元素)
	我们只向一个输出迭代器赋值一次
	输出迭代器只能用于单遍扫描算法
	用作目的位置的迭代器通常都是输出迭代器
		copy函数的第三个参数就是输出迭代器
		ostream_iterator类型也是输出迭代器

前向迭代器(forward iterator)
	可以读写元素，只能在序列中沿着一个方向移动
	前向迭代器支持所有输入和输出迭代器的操作，而且可以多次读写同一个元素
	可以保存前向迭代器的状态，使用前向迭代器的算法可以对序列进行多遍扫描
	算法replace要求前向迭代器，forward_list上的迭代器是前向迭代器

双向迭代器(bidirectional iterator)
	可以正向/反向读写序列中的元素
	除了支持所有前向迭代器的操作之外，双向迭代器还支持前置和后置递减运算符(--)
	reverse要求双向迭代器，除了forward_list之外，其他标准库都提供符合双向迭代器要求的迭代器

随机访问迭代器(random-access iterator)
	提供在常量时间内访问序列中任意元素的能力
	此类迭代器支持双向迭代器的所有功能
	还支持表3.7(99页)中的操作
		用于比较两个迭代器相对位置的关系运算符(<、<=、>和>=)
		迭代器和一个整数值的加减运算(+、+=、-和-=)，计算结果是迭代器在序列中前进(或后退)给定整数个元素后的位置
		用于两个迭代器上的减法运算符(-)，得到两个迭代器的距离
		下标运算符(iter[n])，与*(iter[n])等价
	sort要求随机访问迭代器
	array、deque、string和vector的迭代器都是随机访问迭代器，用与访问内置数组元素的指针也是
*/

/*
10.39
list: 属于双向迭代器
vector：属于随机访问迭代器
*/

/*
10.40
copy第一第二个为输入迭代器，第三个为输出迭代器
reverse双向迭代器
unique要求前向迭代器
*/